from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_jwt_extended import (
    JWTManager, create_access_token, jwt_required, get_jwt_identity
)
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import timedelta

app = Flask(__name__)

# Configuration
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///data.db'
app.config['JWT_SECRET_KEY'] = 'your_jwt_secret_key'  # Change this to a secure key
app.config['JWT_ACCESS_TOKEN_EXPIRES'] = timedelta(hours=1)

db = SQLAlchemy(app)
jwt = JWTManager(app)

# Models
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)
    is_admin = db.Column(db.Boolean, default=False)

class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    description = db.Column(db.String(200))

# Initialize the database
@app.before_first_request
def create_tables():
    db.create_all()

# Routes
@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')

    user = User.query.filter_by(username=username).first()
    if user and check_password_hash(user.password, password):
        access_token = create_access_token(identity={'username': username, 'is_admin': user.is_admin})
        return jsonify(access_token=access_token), 200
    return jsonify(message='Invalid credentials'), 401

@app.route('/admin', methods=['POST'])
@jwt_required()
def admin():
    current_user = get_jwt_identity()
    if not current_user['is_admin']:
        return jsonify(message='Admin access required'), 403
    return jsonify(message='Welcome Admin!'), 200

@app.route('/health')
def health():
    return jsonify({"status": "healthy"}), 200

@app.route('/product', methods=['POST'])
@jwt_required()
def add_product():
    current_user = get_jwt_identity()
    if not current_user['is_admin']:
        return jsonify({"msg": "Access denied"}), 403
    product_data = request.json
    if Product.query.filter_by(name=product_data['name']).first():
        return jsonify({"msg": "Product name must be unique"}), 409
    new_product = Product(name=product_data['name'], description=product_data['description'])
    db.session.add(new_product)
    db.session.commit()
    return jsonify({"msg": "Product is saved successfully"}), 201

@app.route('/products', methods=['GET'])
@jwt_required()
def get_products():
    products = Product.query.all()
    return jsonify([{'id': p.id, 'name': p.name, 'description': p.description} for p in products]), 200

@app.route('/product/<int:product_id>', methods=['GET'])
@jwt_required()
def get_product(product_id):
    product = Product.query.get(product_id)
    if product:
        return jsonify({'id': product.id, 'name': product.name, 'description': product.description}), 200
    return jsonify({"msg": "Product not found"}), 404

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
